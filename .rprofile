
#### TEMPORARY
#### for making random DS201 teams
random_teams <- function(seed) {
    if(missing(seed)) { cat('Add a random seed to generate team names\n'); return(invisible(0)) }
    ##names <- readLines('~/Downloads/ds201_student_names.txt')
    ##cat('\n\n', paste0(paste0('\"', names, '\"'), collapse = ', '), '\n\n')
    ## from Spring 2024:
    ##names <- c("Ainsley Carlson", "Jackson Chambers", "Emily Coe", "Lauren Cunningham", "Elena Duffy", "Alex Evans", "Connor Freeman", "Jacob Freeman", "Edward Grant", "Samuel Harris", "Annie Hou", "Kevin Husar", "John Mathes", "Stone McDonald", "Justin Mitala", "Niko Orecchio", "John Pogorelov", "Adam Port", "Sean Reilly", "William Reynolds", "Griffin Rooney", "Alexa Sadowski", "Abigail Schaus", "Alyssa Vitale", "Finian Zakas")
    ## from Spring 2025:
    names <- c("Dylan Aguilera", "Patrick Amoyaw", "Nisan Basciftci", "Brian Baucia", "Gianna Bobrowski", "Charlotte Carter", "Eurnett Christopher", "Bram Cohen", "Francis Dougherty", "Trace Florio", "Madeline Kiel", "Cameron Kratz", "Angel Marmolejo Flores", "Jacob Nickel", "Andrew Nuth", "Matthew Olson", "Evelyn Papalimberis", "Ben Risley", "Gus Salopek", "Ellie Sherwood", "Gianna Tesi", "Sahil Thakali", "Itza Urrutia Gonzalez", "Brady Valle")
    jn <- function(a, b) paste0(a, ', ', b)
    set.seed(seed)
    names <- sample(names)
    teams <- character()
    while(length(names) >= 4) {
        teams[length(teams)+1] <- jn(names[1], names[2])
        names <- names[-(1:2)]
    }
    if(length(names) == 3) {
        teams[length(teams)+1] <- jn(jn(names[1], names[2]), names[3])
    } else if(length(names) == 2) {
        teams[length(teams)+1] <- jn(names[1], names[2])
    } else stop('internal error')
    ##return(teams)
    teams <- paste0(teams, '\n')
    cat('\n\n', teams, '\n\n')
}


#### TEMPORARY
#### (for STAT319 projects)
##files <- c(
##    '~/github/courses/stat319/projects/trading/trading_code.R',
##    '~/github/courses/stat319/projects/baseball_statistics/baseball_code.R',
##    '~/github/courses/stat319/projects/global_demographics/global_code.R',
##    '~/github/courses/stat319/projects/spam_classification/spam_code.R'
##)
##for(f in files) source(f)
####
####

options(device = 'quartz')

## let's rmarkdown::render find pandoc
## seems necessary for my C-c C-p to knit Rmd documents
Sys.setenv(RSTUDIO_PANDOC='/usr/local/bin')

## Berkeley CRAN mirror appears to have disappeared, Feb 2020
##options(repos  = 'http://cran.cnr.berkeley.edu')
## Imerial College (UK) mirror appears to have disappeared, Jan 2024
##options(repos  = 'https://cran.ma.imperial.ac.uk/')
options(repos  = 'https://mirrors.nics.utk.edu/cran/')

options(scipen=999)  ## turns off scientific notation display

##roundSig <- function(x) round(x, -floor(log10(abs(x))))

build <- function(x) {
    if('nimble' %in% .packages())   return(invisible())    ## return if nimble already loaded
    x <- as.character(substitute(x))
    if(length(x) > 1) stop('need to put the build name in quotes for calling the build function()')
    buildDir <- paste0('~/temp/builds/', x)
    if(!file.exists(buildDir)) stop(paste0('no build: ', buildDir), call. = FALSE)
    message('==============================================')
    message(paste0('loading nimble build: ', x))
    message('==============================================')
    library(nimble, lib.loc = buildDir)
}

makeActiveBinding('ppp', function() conf$printSamplers(byType = TRUE), .GlobalEnv)

makeActiveBinding('pppp', function() conf$printSamplers(), .GlobalEnv)

makeActiveBinding('qqq', function() q('no'), .GlobalEnv)

makeActiveBinding('rrr', function() eval(quote(rm(list = setdiff(ls(), c(
                                                                           'build',
                                                                           'ppp',
                                                                           'pppp',
                                                                           'qqq',
                                                                           'rrr'
                                                                       )))), envir = .GlobalEnv), .GlobalEnv)

library <- function(package, ...) {
    pkgName <- as.character(substitute(package))
    libraryCall <- substitute(base::library(package = PKG, ...), list(PKG = pkgName))
    e <- try(eval(substitute(CALL, list(CALL = libraryCall))), silent = TRUE)
    if(inherits(e, 'try-error')) {
        eval(substitute(install.packages(PKG), list(PKG = pkgName)))
        eval(substitute(CALL, list(CALL = libraryCall)))
    }
}

#### make L as the first argument of (the function call) R
#### this is a new feature in newer versions of R (actually: `|>` )
#### since upgrading to R version 4.1 (or higher) I have `|>` from R
##`%|>%` <- function(L, R) {
##    R <- substitute(R)
##    L <- substitute(L)
##    newR <- R
##    newR[[2]] <- L
##    lenR <- length(R)
##    if(length(R) > 1) {
##        newR[3:(lenR+1)] <- R[2:lenR]
##        if(!is.null(names(R)))   names(newR)[3:(lenR+1)] <- names(R)[2:lenR]
##    }
##    return(eval(newR, parent.frame()))
##}

##stan_model <- function(...) {
##    suppressWarnings(rm(ppp, pppp, qqq, envir = .GlobalEnv))
##    out <- rstan::stan_model(...)
##    makeActiveBinding('ppp', function() conf$printSamplers(byType = TRUE), .GlobalEnv)
##    makeActiveBinding('pppp', function() conf$printSamplers(), .GlobalEnv)
##    makeActiveBinding('qqq', function() q('no'), .GlobalEnv)
##    invisible(out)
##}



